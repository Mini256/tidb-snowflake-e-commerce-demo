<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pingcap.ecommerce.dao.tidb.UserMapper">
  <resultMap id="User" type="com.pingcap.ecommerce.model.User">
    <constructor>
      <idArg column="id" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="password" javaType="java.lang.String" jdbcType="VARCHAR" />
    </constructor>
  </resultMap>
  <resultMap id="UserVO" type="com.pingcap.ecommerce.vo.UserVO">
      <result property="userId" column="id" javaType="java.lang.String" jdbcType="VARCHAR" />
      <result property="username" column="username" javaType="java.lang.String" jdbcType="VARCHAR" />
      <result property="userLabel" column="user_label" javaType="java.lang.String" jdbcType="VARCHAR" />
      <result property="avgAmount" column="avg_amount" javaType="java.math.BigDecimal" jdbcType="DECIMAL" />
      <result property="createTime" column="create_time" javaType="java.util.Date" jdbcType="VARCHAR" />
      <result property="updateTime" column="update_time" javaType="java.util.Date" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="PageMeta" type="com.pingcap.ecommerce.vo.PageMeta">
    <result property="pageNum" column="page_num" javaType="java.lang.Integer" jdbcType="INTEGER" />
    <result property="pageSize" column="page_size" javaType="java.lang.Integer" jdbcType="INTEGER" />
    <result property="startKey" column="start_key" javaType="java.lang.String" jdbcType="VARCHAR" />
    <result property="endKey" column="end_key" javaType="java.lang.String" jdbcType="VARCHAR" />
  </resultMap>

  <select id="selectByUsername" parameterType="java.lang.String" resultMap="User">
    SELECT
      id, username, password
    FROM users
    WHERE username = #{username,jdbcType=VARCHAR};
  </select>

  <select id="existsAnyUsers" resultType="integer">
    SELECT 1 FROM users LIMIT 1;
  </select>

  <select id="getUsers" resultMap="UserVO">
    SELECT * FROM users LIMIT #{pageable.offset}, #{pageable.pageSize}
  </select>
  <!--
    If you use `LIMIT ... OFFSET ...` to paginate the query, the latency of the query will
    also become larger as the OFFSET value gets larger and larger.
  -->
  <select id="getUserIds" resultType="string">
    SELECT id FROM users LIMIT #{offset}, #{pageSize}
  </select>
  <!--
    We can use the window function of TiDB to paginate data according to a certain key value (Fox example: user_id).
    and then we can use the index of the key to achieve faster paging processing of data.

    For details about the pagination processing of TiDB when the amount of data is large, please
    refer to the "Paginate Results" chapter in the TiDB Development Guide.
    Reference: https://docs.pingcap.com/tidb/dev/dev-guide-paginate-results#paging-batches-for-single-field-primary-key-tables
  -->
  <select id="getUserPages" resultMap="PageMeta">
    SELECT
      floor((t.row_num - 1) / #{pageSize}) + 1 AS page_num,
      min(t.id) AS start_key,
      max(t.id) AS end_key,
      count(*) AS page_size
    FROM (
      SELECT id, row_number() OVER (ORDER BY id) AS row_num
      FROM users
    ) t
    GROUP BY page_num
    ORDER BY page_num
  </select>
  <select id="getUserIdsByPageMeta" resultType="string">
    SELECT id FROM users
    WHERE id BETWEEN #{startKey} AND #{endKey}
    ORDER BY id
  </select>

  <select id="getUsersWithLabel" resultMap="UserVO">
    SELECT id, username, ul.user_label, ul.avg_amount, u.create_time, u.update_time
    FROM users u
    LEFT JOIN user_labels ul on u.id = ul.user_id
    LIMIT #{offset}, #{pageSize};
  </select>

  <select id="getUsersWithLabelCount" resultType="_long">
    SELECT count(*)
    FROM users u
    LEFT JOIN user_labels ul on u.id = ul.user_id;
  </select>

  <select id="searchUsersForAutoComplete" resultMap="UserVO">
    SELECT id, username, ul.user_label, ul.avg_amount, u.create_time, u.update_time
    FROM users u
    LEFT JOIN user_labels ul on u.id = ul.user_id
    <where>
      <if test="username != null">
        AND username LIKE CONCAT(#{username}, '%')
      </if>
    </where>
    LIMIT 10;
  </select>
</mapper>